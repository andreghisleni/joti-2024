generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(uuid())
  name  String
  email String  @unique
  image String?

  passwordHash String @map("password_hash")

  type UserType @default(DEFAULT)

  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum UserType {
  DEFAULT
  ADMIN
}

model Settings {
  id String @id @default(uuid())

  // saveScore  Boolean @default(true) @map("save_score")
  // saveReport Boolean @default(true) @map("save_report")
  // saveVote   Boolean @default(false) @map("save_vote")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model Member {
  id String @id @default(uuid())

  name String

  registerNumber String @map("register_number")
  registerCode   String @map("register_code")

  phone String?
  email String

  responsibleName  String @map("responsible_name")
  responsiblePhone String @map("responsible_phone")

  createdAt DateTime @default(now()) @map("created_at")

  jotiMembers JotiMember[]
}

model JotiMember {
  id String @id @default(uuid())

  externalId  String  @map("external_id")
  date        String
  password    String
  role        String
  email       String
  groupName   String  @map("group_name")
  groupNumber String  @map("group_number")
  name        String
  region      String
  lgpd        Boolean
  register    String
  session     String
  association String
  active      Boolean
  v           Int

  memberId String @map("member_id")
  member   Member @relation(fields: [memberId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
}
